<?xml version="1.0" encoding="utf-8"?>
<ADL version="1.2">
  <TypeDefinition url="default_typedef.xml"/>
  <GlobalVariables url="globalvars.xml"/>
  <Application id="escm" codepage="utf-8" language="Korean" loginformurl="" loginformstyle="" windowopeneffect="" windowcloseeffect="" version="" tracemode="new" themeid="escm.xtheme" onload="application_onload" onerror="application_onerror" licenseurl="nexacro14_client_license.xml" addcookietovariable="true" loadingimage="URL('theme://images/loading.gif')" httptimeout="900">
    <Layout>
      <MainFrame id="mainframe" title="maintitle" defaultfont="" resizable="true" showtitlebar="true" showstatusbar="false" left="0" top="0" height="651" openalign="center middle" openstatus="normal" titletext="하나로 eSCM" width="1010">
        <VFrameSet id="VFrameSet0" separatesize="*,0,0">
          <Frames>
            <ChildFrame id="LoginFrame" showtitlebar="false" dragmovetype="none"/>
            <ChildFrame id="TopFrame" showtitlebar="false" dragmovetype="all"/>
            <HFrameSet id="HFrameSet0" separatesize="0,0,*">
              <Frames>
                <ChildFrame id="LeftFrame" showtitlebar="false"/>
                <VFrameSet id="VFrameSet1" separatesize="32,*">
                  <Frames>
                    <ChildFrame id="MdiFrame" formurl="frame::MDI.xfdl" showtitlebar="false"/>
                    <FrameSet id="FrameSet0" openstatus="normal">
                      <Frames/>
                    </FrameSet>
                  </Frames>
                </VFrameSet>
                <ChildFrame id="PotalFrame" showtitlebar="false"/>
              </Frames>
            </HFrameSet>
          </Frames>
        </VFrameSet>
      </MainFrame>
    </Layout>
    <ScreenInfo/>
    <Style url="css::common.css"/>
    <Style url="css::workFrame.css"/>
    <Style url="css::topFrame.css"/>
    <Style url="css::leftFrame.css"/>
    <Style url="css::mdi.css"/>
    <Style url="css::main.css"/>
    <Script type="xscript5.0"/>
  </Application>
  <Script type="xscript5.0"><![CDATA[this.afrm_VFrameSet0 = "";       		//최상단 VFrame 절대경로
this.afrm_HFrameSet0 = "";				//최상단 HFrame 절대경로
this.afrm_LoginFrame = "";       		//LoginFrame 절대경로
this.afrm_TopFrame   = "";       	    //TopFrame 절대경로
this.afrm_FrameSet   = "";	     		//FrameSet0 절대경로
this.afrm_MDIFrame   = "";      		//MDIFrame  절대경로
this.afrm_PotalFrame = "";              
this.afrm_VFrameSet1 = "";


// == 인증서 정책  관련 		===================================== //
// -- 기업/기관 범용 OID 모음
var FIRST_COMP_CERT_POLICIES = "1 2 410 200012 1 1 3:전자거래범용(기업용)|1 2 410 200004 5 1 1 7:전자거래범용(기업용)|1 2 410 200005 1 1 5:전자거래범용(기업용)|1 2 410 200004 5 2 1 1:전자거래범용(기업용)|1 2 410 200004 5 4 1 2:전자거래범용(기업용)|1 2 410 200004 5 3 1 1:전자거래범용(기관용)|1 2 410 200004 5 3 1 2:전자거래범용(기업용)|";
//-- 개인 범용 OID 모음
var FIRST_INDI_CERT_POLICIES = "1 2 410 200012 1 1 1:전자거래범용(개인용)|1 2 410 200004 5 1 1 5:전자거래범용(개인용)|1 2 410 200005 1 1 1:전자거래범용(개인용)|1 2 410 200004 5 2 1 2:전자거래범용(개인용)|1 2 410 200004 5 4 1 1:전자거래범용(개인용)|1 2 410 200004 5 3 1 9:전자거래범용(개인용)|";
//-- 개인 + 기업/기관 범용 OID 모음
var GENERAL_PURPOSE_CERT_POLICIES = FIRST_COMP_CERT_POLICIES + FIRST_INDI_CERT_POLICIES;
// 보고자하는 인증서 정책 모음. 
var POLICIES = FIRST_COMP_CERT_POLICIES + FIRST_INDI_CERT_POLICIES; 

// 서명시 필요한 Config 조절.
// 서명 생성시 인증서 포함 여부, 0 : 서명자 인증서만 포함.(기본), 1 : 서명자 & CA 인증서 포함.
var INC_CERT_SIGN 		= 0;
// 서명 생성시 서명시간 포함 여부, 0 : 미포함, 1 : 포함(기본)
var INC_SIGN_TIME_SIGN	= 0;
// 서명 생성시 CRL 인증서 포함 여부, 0 : 미포함 (기본), 1 : 포함, 
var INC_CRL_SIGN		= 0;
// 서명 생성시 원본데이타 포함 여부 , 0 : 미포함, 1 : 포함(기본)
var INC_CONTENT_SIGN 	= 1;

// 인증서 검증에 필요한 Config 조절
// 사용자 인증서 검증 조건, 0 : CRL 체크 안함. 1 : 현재시간기준으로 유효한 CRL 사용(기본), 2 : 현재 시간기준으로 유효한 CRL 못 구할 시 이전 CRL 사용.
var USING_CRL_CHECK		= 1;
// CA 인증서 검증 조건, 0 : ARL 체크 안함. 1 : 현재시간기준으로 유효한 ARL 사용(기본), 2 : 현재 시간기준으로 유효한 CRL 못 구할 시 이전 ARL 사용.
var USING_ARL_CHECK		= 1;




//어플리케이션 처음구동( form의 form_onload와 같은기능)
this.application_onload = function(obj:Application, e:nexacro.LoadEventInfo)
{
	//개발시 편의를 위해 사용된 변수
	//런쳐구동시 false처리
	this.gv_quickviewmode = false;

	//각 프레임 바라볼수 있도록. 화면에서는  this-> application으로 변경해서 호출하여 사용
	//예) application.afrm_VFrameSet0.form.grd_list
	this.afrm_VFrameSet0 = application.mainframe.VFrameSet0;
	this.afrm_HFrameSet0 = application.mainframe.VFrameSet0.HFrameSet0;
	this.afrm_TopFrame   = application.mainframe.VFrameSet0.TopFrame;
	this.afrm_LeftFrame  = application.mainframe.VFrameSet0.HFrameSet0.LeftFrame;
	this.afrm_PotalFrame = application.mainframe.VFrameSet0.HFrameSet0.PotalFrame;
	this.afrm_VFrameSet1 = application.mainframe.VFrameSet0.HFrameSet0.VFrameSet1;
	this.afrm_FrameSet   = application.mainframe.VFrameSet0.HFrameSet0.VFrameSet1.FrameSet0;
	this.afrm_MDIFrame   = application.mainframe.VFrameSet0.HFrameSet0.VFrameSet1.MdiFrame;
	//접속주소 리턴
	var adlUrl = application.xadl;	
	//trace(adlUrl);
	
	var checkServer = adlUrl.substring(0,4);
	
	if(checkServer.indexOf('file') != -1 || adlUrl.indexOf('localhost') != -1){//로컬
		application.gv_serverType = 'LOCAL';
		application.gv_version = 'pass';
		iconUrl = "http://localhost:8080/nhvan/escm/nhvan.ico";
	}else{ //운영서버 or 개발서버
	
		 //http://www.nhescm.co.kr/escm/escm.xadl.js 운영
		 //http://121.156.58.242/escm/escm.xadl.js 개발
		
		 var devMode = false;
		
		 if(adlUrl.indexOf('121.156.58.242') != -1){ 
			devMode = true;
		 }else if(adlUrl.indexOf('www.nhescm.co.kr') != -1){ 
			devMode = false;		 
		 }else{ 
			this.alert('주소설정이 잘못되었습니다.\n관리자에게 문의하세요.');
			return;
		 }
		 
		 var domain = "";
		 
		 if(devMode){ //개발
			domain = "http://121.156.58.242";
			application.gv_serverType = 'DEV';
		 }else{	//운영	
			domain = "https://www.nhescm.co.kr"; 
			application.gv_serverType = 'ADMIN';
		 }
		 
		 application.services['svc'].url 	= domain + "/nhvan/";
		 application.gv_server_url       	= domain + "/nhvan/";
		 application.gv_chartJS_url      	= domain + "/escm/chart/rMateChartH5";
		 application.gv_chartHtml_url    	= domain + "/escm/chart/rMateChartH5/Html/nexacroChartH5.html";
		 application.gv_ozViewer_url     	= domain + "/nhvan/oz/ozViewer.nh";
		 application.gv_serviceHtml_url  	= domain + "/";
		 application.gv_userId = "";
		 application.gv_redirect_url        = domain + "/escm/index.html";		 
		 iconUrl = domain+"/escm/nhvan.ico";		 
		 
		 if(devMode){ //개발
			application.services['svc_admin'].url = domain + ":8080/nhvanadmin/";
			application.gv_serverAdmin_url        = domain + ":8080/nhvanadmin/";
		 }else{//운영
			application.services['svc_admin'].url = domain + ":8443/nhvanadmin/";
			application.gv_serverAdmin_url        = domain + ":8443/nhvanadmin/";
		 }
	}
	
	
	/*********인증서 설치 여부 체크 ******************/
// 	var nRet;
// 	// 모든 Condition 설정.
// 	POLICIES += "1 2 410 200004 5 2 1 6 460:농협하나로유통 특법인 인증서|"
// 	try
// 	{
// 		var objTs = new Plugin();
// 		objTs.set_classid("{55D9860A-AB9C-44A1-BB74-75AF7F805333}");
// 		objTs.set_mimetype("application/x-shockwave-flash");
// 		objTs.init("objTs", "absolute", 0, 0, 0, 0, null, null);
// 		alert(objTs.isLoaded());
// 		objTs.show();
// 
// 		nRet = objTs.callMethod("SetConfig","test", CA_LDAP_INFO, CTL_INFO, POLICIES, 
// 								INC_CERT_SIGN, INC_SIGN_TIME_SIGN, INC_CRL_SIGN, INC_CONTENT_SIGN,
// 								USING_CRL_CHECK, USING_ARL_CHECK);
// 								
// 		trace("SetConfig :: nRet :: " + nRet);
// 		
// 	}
// 	catch(e)
// 	{
// 		alert("인증서 설치가 제대로 되지 않았습니다. \nTSToolkit v2.0.6.4를 설치하여 주십시오.");
// 		//화면이동
// 		location.href = "http://localhost:8080/nhvan/escm/QuickView.html?formname=_test%3A%3Ainstall.xfdl";
// 		return false;
// 	}
// 	
// 	try
// 	{
// 		var nRet, rvalue, signedti;
// 		rtn = true;
// 		var objTsXml = new Plugin();
// 		objTsXml.set_classid("{BBC1A21F-05A2-44ED-B67E-E7C762F0BE23}");
// 		objTsXml.init("objTsXml", "absolute", 0, 0, 0, 0, null, null);
// 		objTsXml.set_mimetype("application/x-shockwave-flash");
// 		objTsXml.init("objTs", "absolute", 0, 0, 0, 0, null, null);
// 		alert(objTsXml.isLoaded());
// 		objTs.show();
// 		nRet = objTsXml.callMethod("init");//{BBC1A21F-05A2-44ED-B67E-E7C762F0BE23}
// 		
// 		trace("init :: nRet :: " + nRet);
// 	}
// 	catch(e)
// 	{	
// 		alert("인증서 설치가 제대로 되지 않았습니다. \nTSXMLToolkit v3.0.0.6를 설치하여 주십시오.");
// 		//화면이동
// 		location.href = "http://localhost:8080/nhvan/escm/QuickView.html?formname=_test%3A%3Ainstall.xfdl";
// 		return false;
// 	}
	
	/*********로그인 여부 체크************/
	var svcID = "retrieveSessionIs";
	var strURL = "svc::rest/pt/retrieveSessionIs" + "?userKey="+application.gv_userKey;
	var inData = "";
	var outData = "gds_session=ds_session";
	var otherArg = "";
	var isHttpAsync = true;
	application.transaction(svcID, strURL, inData, outData, otherArg, "adl_callback", isHttpAsync, 2);
		
	if(system.navigatorname!="nexacro")
	{
		if(system.navigatorname=="IE" && (system.navigatorversion=="8" || system.navigatorversion=="9") )
		{
			
		}
		else
		{
			window.history.pushState(null, null, location.href); 

			window.onpopstate = function(event) { 
				window.history.go(1); 
			};
			window.onbeforeunload = function(e) 
			{ 
				//return 'message';
			};
		}
	}
	else 
	{
		//svcID = "retrieveSessionIs"
	}
	
	
	//아이콘 생성
	var iconUrl = '';
	var headTag = window.document.getElementsByTagName("head")[0];
	var headChildNodes = headTag.childNodes;
	var appendIndex = 0;
	for(var i=0 ; i<headTag.childNodes.length ; i++){
		var nodeName = headChildNodes[i].nodeName;
		if(nodeName.toLowerCase().indexOf('script') != -1){
			appendIndex = i;
			break;
		}
	}	
	var linkEle = document.createElement("link");
	
	
	linkEle.setAttribute("href", iconUrl);
	linkEle.setAttribute("rel","shortcut icon");
	headTag.insertBefore(linkEle, headChildNodes[appendIndex]);
	
	this.replaceDatasum(); 
}


this.adl_callback = function(svcID, ErrorCode, ErrorMsg)
{	
	if(ErrorCode < 0)
	{
// 		if(application.gv_quickviewmode == false){
// 			if(ErrorCode == -100) {
// 				this.gfn_getMessage("alert", ErrorMsg);
// 				this.gfn_clearGlobal();
// 				return;
// 			}
// 		}
		trace("SessionBox Check오류.");
		this.afrm_VFrameSet0.LoginFrame.set_formurl("frame::Intro.xfdl");
	}
	else
	{
		
		if(application.gds_session.rowcount > 0)
		{
			this.afrm_VFrameSet0.set_separatesize("0,65,*");
			this.afrm_HFrameSet0.set_separatesize("0,0,*");
			this.afrm_VFrameSet0.LoginFrame.set_formurl("frame::Intro.xfdl");
			application.gv_userTPC = "user";
			application.gv_userKey         = this.nvl(application.gds_session.getColumn(0, "userKey"), "");
			application.gv_userId          = this.nvl(application.gds_session.getColumn(0, "userID"), "");
			application.gv_glnCode         = this.nvl(application.gds_session.getColumn(0, "glnCode"), "");
			application.gv_mbcoType        = this.nvl(application.gds_session.getColumn(0, "mbcoType"), "");
			application.gv_companyName     = this.nvl(application.gds_session.getColumn(0, "companyName"), "");
			application.gv_userName        = this.nvl(application.gds_session.getColumn(0, "userName"), "");
			application.gv_companyType     = this.nvl(application.gds_session.getColumn(0, "commanyType"), "");
			application.gv_lastLoginDt     = this.nvl(application.gds_session.getColumn(0, "lastLoginDt"), "");
			application.gv_userType        = this.nvl(application.gds_session.getColumn(0, "userType"), "");
			application.gv_firstLoginYn    = this.nvl(application.gds_session.getColumn(0, "firstLoginYn"), "");
			application.gv_userCvDsc       = this.nvl(application.gds_session.getColumn(0, "userCvDsc"), "");
			application.gv_userStatus      = this.nvl(application.gds_session.getColumn(0, "userStatus"), "");
			application.gv_userAuth        = this.nvl(application.gds_session.getColumn(0, "userAuth"), "");
			application.gv_pwOverTermYn    = this.nvl(application.gds_session.getColumn(0, "pwOverTermYn"), "");
			application.gv_hoffApvYn       = this.nvl(application.gds_session.getColumn(0, "hoffApvYn"), "");
			application.gv_naUsrSysKdc     = this.nvl(application.gds_session.getColumn(0, "naUsrSysKdc"), "");
			application.gv_svcStatus	   = this.nvl(application.gds_session.getColumn(0, "svcStatus"), "");
			application.gv_bizNumber	   = this.nvl(application.gds_session.getColumn(0, "bizNumber"), "");
			application.gv_changeMb		   = this.nvl(application.gds_session.getColumn(0, "CHANGE_MB"), "");
			application.gv_changeElt       = this.nvl(application.gds_session.getColumn(0, "CHANGE_ELT"), "");
			application.gv_upGlnCode       = this.nvl(application.gds_session.getColumn(0, "upGlnCode"), "");
			application.gv_billingUserID   = this.nvl(application.gds_session.getColumn(0, "billingUserID"), "");
			application.gv_billingUserName = this.nvl(application.gds_session.getColumn(0, "billingUserName"), "");
			application.gv_noAuthMenuGroup = this.nvl(application.gds_session.getColumn(0, "noAuthMenuGroup"), "");
			application.gv_userSystemCode = this.nvl(application.gds_session.getColumn(0, "userSystemCode"), "");
			application.gv_weakPwYn = this.nvl(application.gds_session.getColumn(0, "weakPwYn"), "");
			application.gv_trplDtlTpc = this.nvl(application.gds_session.getColumn(0, "trplDtlTpc"), "");
		}
		else
		{	
			this.afrm_VFrameSet0.LoginFrame.set_formurl("frame::Intro.xfdl");
		}
	}
}
/**
 * @class 입력값이 null에 해당하는 경우 모두를 한번에 체크한다.
 * @param Val : 체크할 문자열(예 : null 또는 undefined 또는 "" 또는 "abc")
 * @return Boolean,	Val이 undefined, null, NaN, "", Array.length = 0인 경우 = true
 *					이외의 경우 = false
 */  
this.isNull = function (val)
{
	if (new String(val).valueOf() == "undefined"){
		return true;
	}
	if (val == null){
		return true;
	}
	if (("x" + val == "xNaN") && (new String(val.length).valueOf() == "undefined")){
		return true;
	}
	if (val.length == 0){
		return true;
	}
	return false;
}

this.nvl = function(val,val2)
{
    var rtnVal = (this.isNull(val)) ? val2 : val;
    return rtnVal;
}

this.application_onerror = function(obj:Application, e:nexacro.ErrorEventInfo)
{
	var adlUrl = application.xadl;

	// 글로벌 변수 통신 결과 셋팅
	this.gv_httpcode = e.errorcode;
		
	if (0 != e.errorcode) {
	
		if( e.errorcode == "-2147418039" ){
			return true;
		}
	
		if (12029 == e.statuscode) {
			alert("Server Status Code is (" + e.statuscode + ")");
			return true;
		} else {
			 var strErrMsg  = "\n";
			 strErrMsg += "=========== Application On Error ===========\n";
			 strErrMsg += "StatusCode : " + e.statuscode + " \n";
			 strErrMsg += "ErrorCode  : " + e.errorcode + " \n";
			 strErrMsg += "Errormsg   : " + e.errormsg + " \n";
			 strErrMsg += "errorobj   : " + e.errorobj + " \n";
			 strErrMsg += "eventid    : " + e.eventid + " \n";		//onerror
			 strErrMsg += "locationuri: " + e.locationuri + " \n";//""
			 strErrMsg += "requesturi : " + e.requesturi + " \n";//""			
			 trace("error", strErrMsg);
		}
    }
}

//그리드에서 Sum처리할때 String타입도 가능하도록 처리
this.replaceDatasum = function() 
{ 
	var _pDataset = nexacro.Dataset.prototype; 
	_pDataset._getSum = function (colidx, start, end, pivotidx, coltype) 
	{ 
		var view = this._viewRecords; 
		var rowData; 
		var sum = 0; 
		var i = start; 

		if (coltype != 4) { 
			
			function _getSum_loop(pthis) 
			{ 
				if (i < end) { 
					rowData = view[i]; 
					if (rowData._rtype == 16) { // ROWTYPE_GROUP  
						i++; 
						return false; 
					} 
					
					var v = rowData[colidx]; 
					if (!nexacro._isNumber(v)) { 

						if(v == null || v == undefined || v == "") { 
							v = 0; 
						} else if(v.indexOf(".")<0) { 
							v = parseInt(v, 10); 
							rowData[colidx] = v; 
						} else { 
							v = parseFloat(v); 
							rowData[colidx] = v; 
						} 

					} 
					//if (nexacro._isNumber(rowData[colidx]) && pthis._checkRowData(rowData)) 
					if (pthis._checkRowData(rowData)) { 
						sum += (+v); 
					} 
				
					i++; 
					return false; 
				} 
		
				return true; 
			} 
		
			while (true) { 
				if (_getSum_loop(this)) break; 
				if (_getSum_loop(this)) break; 
				if (_getSum_loop(this)) break; 
				if (_getSum_loop(this)) break; 
				if (_getSum_loop(this)) break; 
				if (_getSum_loop(this)) break; 
				if (_getSum_loop(this)) break; 
				if (_getSum_loop(this)) break; 
				if (_getSum_loop(this)) break; 
				if (_getSum_loop(this)) break; 
				if (_getSum_loop(this)) break; 
				if (_getSum_loop(this)) break; 
				if (_getSum_loop(this)) break; 
				if (_getSum_loop(this)) break; 
				if (_getSum_loop(this)) break; 
				if (_getSum_loop(this)) break; 
				if (_getSum_loop(this)) break; 
				if (_getSum_loop(this)) break; 
				if (_getSum_loop(this)) break; 
				if (_getSum_loop(this)) break; 
			} 
		} else { 
			sum = new nexacro.Decimal; 

			function _getSumDecimal_loop( pthis ) 
			{ 
				if ( i < end ){ 
					rowData = view[i]; 
					if ( (rowData[colidx] != null) && pthis._checkRowData( rowData ) ) { 
						sum.addDecimal( rowData[colidx] ); 
					} 
					i++; 
					return false; 
				} 
				return true; 
			} 
	
			while (true) { 
				if (_getSumDecimal_loop(this)) break; 
				if (_getSumDecimal_loop(this)) break; 
				if (_getSumDecimal_loop(this)) break; 
				if (_getSumDecimal_loop(this)) break; 
				if (_getSumDecimal_loop(this)) break; 
				if (_getSumDecimal_loop(this)) break; 
				if (_getSumDecimal_loop(this)) break; 
				if (_getSumDecimal_loop(this)) break; 
				if (_getSumDecimal_loop(this)) break; 
				if (_getSumDecimal_loop(this)) break; 
				if (_getSumDecimal_loop(this)) break; 
				if (_getSumDecimal_loop(this)) break; 
				if (_getSumDecimal_loop(this)) break; 
				if (_getSumDecimal_loop(this)) break; 
				if (_getSumDecimal_loop(this)) break; 
				if (_getSumDecimal_loop(this)) break; 
				if (_getSumDecimal_loop(this)) break; 
				if (_getSumDecimal_loop(this)) break; 
				if (_getSumDecimal_loop(this)) break; 
				if (_getSumDecimal_loop(this)) break; 
			} 
		} 
		if (sum instanceof nexacro.Decimal) { 
			return sum.isNaN() ? 0 : sum; 
		} 

		return (+sum) != (+sum) ? 0 : sum; 
	}; 
	delete _pDataset; 
} ]]></Script>
</ADL>
